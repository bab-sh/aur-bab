name: Validate Package

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  workflow_dispatch:
  repository_dispatch:
    types: [release-published]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine-target:
    name: Determine Target Branch
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.target.outputs.branch }}
      is_prerelease: ${{ steps.target.outputs.is_prerelease }}
    steps:
      - name: Determine target branch
        id: target
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            IS_PRERELEASE="${{ github.event.client_payload.prerelease }}"
            if [ "$IS_PRERELEASE" = "true" ]; then
              echo "branch=development" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "::notice::Pre-release detected - targeting development branch"
            else
              echo "branch=main" >> $GITHUB_OUTPUT
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "::notice::Stable release detected - targeting main branch"
            fi
          else
            # For push/PR events, use the current branch
            BRANCH="${{ github.ref_name }}"
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "::notice::Using current branch: $BRANCH"
          fi

  validate:
    name: Validate PKGBUILD
    runs-on: ubuntu-latest
    needs: determine-target

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Validate AUR package
        uses: heyhusen/archlinux-package-action@v2
        with:
          namcap: true
          updpkgsums: false
          flags: --syncdeps --noconfirm --log

  srcinfo-check:
    name: Verify .SRCINFO Sync
    runs-on: ubuntu-latest
    needs: determine-target
    container:
      image: archlinux:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel diffutils

      - name: Verify .SRCINFO sync
        run: |
          useradd -m builder
          chown -R builder:builder .
          
          sudo -u builder makepkg --printsrcinfo > .SRCINFO.generated
          
          if ! diff -u .SRCINFO .SRCINFO.generated; then
            echo "::error::.SRCINFO is out of sync with PKGBUILD"
            echo "::notice::Run 'makepkg --printsrcinfo > .SRCINFO' to update"
            exit 1
          fi
          
          echo "::notice::.SRCINFO is correctly synchronized"

  metadata-check:
    name: Check Package Metadata
    runs-on: ubuntu-latest
    needs: determine-target

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Validate metadata completeness
        run: |
          REQUIRED_FIELDS=("pkgname" "pkgver" "pkgrel" "pkgdesc" "arch" "url" "license")
          
          for field in "${REQUIRED_FIELDS[@]}"; do
            if ! grep -q "^${field}=" PKGBUILD; then
              echo "::error::Missing required field: ${field}"
              exit 1
            fi
          done
          
          if ! grep -q "^# Maintainer:" PKGBUILD; then
            echo "::warning::No maintainer information found"
          fi
          
          VERSION=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "::warning::Version $VERSION doesn't follow semantic versioning"
          fi
          
          echo "::notice::Metadata validation passed"

  version-check:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    needs: determine-target
    outputs:
      version_mismatch: ${{ steps.compare.outputs.version_mismatch }}
      pkgbuild_version: ${{ steps.compare.outputs.pkgbuild_version }}
      release_version: ${{ steps.compare.outputs.release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Get latest release version
        id: release
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Use the version from the dispatch payload
            VERSION="${{ github.event.client_payload.version }}"
            VERSION=${VERSION#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "::notice::Dispatch release version: $VERSION"
          else
            # Fetch latest release from API
            LATEST_RELEASE=$(curl -s "https://api.github.com/repos/bab-sh/bab/releases/latest" | jq -r '.tag_name // empty')
          
            if [ -z "$LATEST_RELEASE" ]; then
              echo "::warning::No releases found in repository"
              echo "version=" >> $GITHUB_OUTPUT
            else
              # Remove 'v' prefix if present
              VERSION=${LATEST_RELEASE#v}
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "::notice::Latest release version: $VERSION"
            fi
          fi

      - name: Get PKGBUILD version
        id: pkgbuild
        run: |
          PKGVER=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          echo "version=${PKGVER}" >> $GITHUB_OUTPUT
          echo "pkgrel=${PKGREL}" >> $GITHUB_OUTPUT
          echo "full_version=${PKGVER}-${PKGREL}" >> $GITHUB_OUTPUT
          echo "::notice::PKGBUILD version: ${PKGVER}-${PKGREL}"

      - name: Compare versions
        id: compare
        run: |
          RELEASE_VER="${{ steps.release.outputs.version }}"
          PKGBUILD_VER="${{ steps.pkgbuild.outputs.version }}"
          
          if [ -z "$RELEASE_VER" ]; then
            echo "version_mismatch=false" >> $GITHUB_OUTPUT
            echo "::notice::No release to compare against"
          elif [ "$RELEASE_VER" != "$PKGBUILD_VER" ]; then
            echo "version_mismatch=true" >> $GITHUB_OUTPUT
            echo "pkgbuild_version=$PKGBUILD_VER" >> $GITHUB_OUTPUT
            echo "release_version=$RELEASE_VER" >> $GITHUB_OUTPUT
            echo "::warning::Version mismatch detected - will be auto-updated"
            echo "::warning::Release: $RELEASE_VER | PKGBUILD: $PKGBUILD_VER"
          
            # Add to job summary
            echo "## ⚠️ Version Mismatch Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Source | Version |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Latest Release** | \`$RELEASE_VER\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **PKGBUILD** | \`$PKGBUILD_VER\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "version_mismatch=false" >> $GITHUB_OUTPUT
            echo "pkgbuild_version=$PKGBUILD_VER" >> $GITHUB_OUTPUT
            echo "release_version=$RELEASE_VER" >> $GITHUB_OUTPUT
            echo "::notice::Versions are in sync ✓"
          fi

  checksum-check:
    name: Verify Checksums
    runs-on: ubuntu-latest
    needs: determine-target
    container:
      image: archlinux:latest
    outputs:
      needs_update: ${{ steps.check.outputs.needs_update }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel pacman-contrib git diffutils

      - name: Check checksums
        id: check
        run: |
          useradd -m builder
          chown -R builder:builder .
          
          cp PKGBUILD PKGBUILD.backup
          
          sudo -u builder updpkgsums
          
          if ! diff -u PKGBUILD.backup PKGBUILD; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "::warning::Checksums in PKGBUILD are outdated - will be auto-updated"
          
            PKGVER=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
            PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
            echo "version=${PKGVER}-${PKGREL}" >> $GITHUB_OUTPUT
          
            # Show changes
            echo "## ⚠️ Checksum Mismatch" >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            diff -u PKGBUILD.backup PKGBUILD >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          
            # Restore for the update job
            mv PKGBUILD.backup PKGBUILD
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "::notice::Checksums are up to date ✓"
          fi

  auto-update:
    name: Auto-Update PKGBUILD
    runs-on: ubuntu-latest
    needs: [determine-target, version-check, checksum-check]
    if: |
      always() && 
      (needs.version-check.outputs.version_mismatch == 'true' || 
       needs.checksum-check.outputs.needs_update == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-target.outputs.target_branch }}

      - name: Update PKGBUILD files
        run: |
          # Update version if needed
          if [ "${{ needs.version-check.outputs.version_mismatch }}" = "true" ]; then
            NEW_VERSION="${{ needs.version-check.outputs.release_version }}"
            sed -i "s/^pkgver=.*/pkgver=$NEW_VERSION/" PKGBUILD
            sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
            echo "Updated PKGBUILD to version $NEW_VERSION-1"
          fi
          
          # Run Arch-specific commands in container
          docker run --rm -v "$PWD:/workspace" -w /workspace archlinux:latest bash -c '
            set -e
            pacman -Syu --noconfirm
            pacman -S --noconfirm base-devel pacman-contrib
            useradd -m builder
            chown -R builder:builder .
            sudo -u builder updpkgsums
            sudo -u builder makepkg --printsrcinfo > .SRCINFO
            echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            sudo -u builder makepkg --syncdeps --noconfirm --log
          '
          
          # Fix permissions - Docker runs as root and creates root-owned files
          sudo chown -R $USER:$USER .
          
          echo "::notice::PKGBUILD updated and verified"

      - name: Generate PR details
        id: pr_details
        run: |
          VERSION_MISMATCH="${{ needs.version-check.outputs.version_mismatch }}"
          CHECKSUM_NEEDS_UPDATE="${{ needs.checksum-check.outputs.needs_update }}"
          IS_PRERELEASE="${{ needs.determine-target.outputs.is_prerelease }}"
          
          # Add prerelease indicator to branch and title if applicable
          PRERELEASE_PREFIX=""
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_PREFIX="pre-"
          fi
          
          if [ "$VERSION_MISMATCH" = "true" ] && [ "$CHECKSUM_NEEDS_UPDATE" = "true" ]; then
            echo "title=📦 Update PKGBUILD version and checksums$( [ '$IS_PRERELEASE' = 'true' ] && echo ' (pre-release)' || echo '' )" >> $GITHUB_OUTPUT
            echo "branch=${PRERELEASE_PREFIX}update-version-checksums-${{ github.run_number }}" >> $GITHUB_OUTPUT
          elif [ "$VERSION_MISMATCH" = "true" ]; then
            echo "title=📦 Update PKGBUILD to version ${{ needs.version-check.outputs.release_version }}$( [ '$IS_PRERELEASE' = 'true' ] && echo ' (pre-release)' || echo '' )" >> $GITHUB_OUTPUT
            echo "branch=${PRERELEASE_PREFIX}update-version-${{ needs.version-check.outputs.release_version }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "title=🔐 Update package checksums$( [ '$IS_PRERELEASE' = 'true' ] && echo ' (pre-release)' || echo '' )" >> $GITHUB_OUTPUT
            echo "branch=${PRERELEASE_PREFIX}update-checksums-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_TOKEN }}
          base: ${{ needs.determine-target.outputs.target_branch }}
          commit-message: |
            chore: update PKGBUILD${{ needs.version-check.outputs.version_mismatch == 'true' && format(' to version {0}', needs.version-check.outputs.release_version) || '' }}${{ needs.determine-target.outputs.is_prerelease == 'true' && ' (pre-release)' || '' }}
            
            ${{ needs.version-check.outputs.version_mismatch == 'true' && format('- Updated pkgver to {0}', needs.version-check.outputs.release_version) || '' }}
            ${{ needs.version-check.outputs.version_mismatch == 'true' && '- Reset pkgrel to 1' || '' }}
            - ${{ needs.checksum-check.outputs.needs_update == 'true' && 'Updated' || 'Regenerated' }} checksums with updpkgsums
            - Updated .SRCINFO
            - Verified package builds successfully
          branch: ${{ steps.pr_details.outputs.branch }}
          delete-branch: true
          title: ${{ steps.pr_details.outputs.title }}
          body: |
            ## 🔄 Automated PKGBUILD Update
            
            This PR automatically updates the PKGBUILD based on validation failures.
            
            ${{ needs.determine-target.outputs.is_prerelease == 'true' && '> **ℹ️ Pre-release Update**
            > This update is for a pre-release version and targets the `development` branch.
            
            ' || '' }}
            ### Changes Made
            
            ${{ needs.version-check.outputs.version_mismatch == 'true' && format('#### 📦 Version Update
            - **Previous version:** `{0}`
            - **New version:** `{1}-1`
            - **Source:** Latest GitHub release (`v{1}`)
            ', needs.version-check.outputs.pkgbuild_version, needs.version-check.outputs.release_version) || '' }}
            
            ${{ needs.checksum-check.outputs.needs_update == 'true' && '#### 🔐 Checksum Update
            - Checksums were outdated and have been regenerated
            ' || '' }}
            
            #### ✅ Validation
            - ${{ needs.version-check.outputs.version_mismatch == 'true' && format('✅ Updated `pkgver` to `{0}`', needs.version-check.outputs.release_version) || '✅ Version already up to date' }}
            - ${{ needs.version-check.outputs.version_mismatch == 'true' && '✅ Reset `pkgrel` to `1`' || '' }}
            - ✅ Updated checksums with `updpkgsums`
            - ✅ Regenerated `.SRCINFO`
            - ✅ Verified package builds successfully
            
            ---
            
            <sub>🤖 This PR was automatically created by the validation workflow</sub>
          labels: |
            automated
            ${{ needs.version-check.outputs.version_mismatch == 'true' && 'version-update' || '' }}
            ${{ needs.checksum-check.outputs.needs_update == 'true' && 'checksums' || '' }}
            ${{ needs.determine-target.outputs.is_prerelease == 'true' && 'pre-release' || '' }}

      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        run: gh pr merge --squash --auto "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [determine-target, validate, srcinfo-check, metadata-check, version-check, checksum-check, auto-update]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "::notice::Target branch: ${{ needs.determine-target.outputs.target_branch }}"
          echo "::notice::Is pre-release: ${{ needs.determine-target.outputs.is_prerelease }}"
          
          # Check if auto-update ran successfully (meaning there was something to fix)
          if [ "${{ needs.auto-update.result }}" = "success" ]; then
            echo "::notice::Automated update PR created successfully"
            echo "::notice::Version mismatch: ${{ needs.version-check.outputs.version_mismatch }}"
            echo "::notice::Checksum needs update: ${{ needs.checksum-check.outputs.needs_update }}"
            exit 0
          fi
          
          # Check if validation jobs succeeded
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.srcinfo-check.result }}" != "success" ] || \
             [ "${{ needs.metadata-check.result }}" != "success" ] || \
             [ "${{ needs.version-check.result }}" != "success" ] || \
             [ "${{ needs.checksum-check.result }}" != "success" ]; then
            echo "::error::Some validation checks failed"
            exit 1
          fi
          
          # Everything passed and no updates needed
          echo "::notice::All validation checks passed! ✓"